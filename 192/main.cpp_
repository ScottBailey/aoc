#include <iostream>
#include <chrono>
#include <algorithm>
#include <stdint.h>
#include <map>
#include <vector>
#include <string>

//const bool debug=false;
class rule
{
public:
   static void load(std::istream& is);
   static bool test(const std::string& s)
   {
      size_t offset = 0;
      return m_map.at(0).test(s,offset);
   }

private:
   rule(char c) : m_type{end}, m_char{c} {}
   rule(unsigned a) : m_type{one}, m_rule{a} {}
   rule(unsigned a1, unsigned a2) : m_type{two}, m_rule{a1,a2} {}
   rule(unsigned a1, unsigned a2, unsigned b1, unsigned b2) : m_type{two_two}, m_rule{a1,a2,b1,b2} {}

   bool test(const std::string& data, size_t& offset) const;

   enum type {
      end,
      one,
      two,
      two_two
   };

   type m_type;
   char m_char;
   std::vector<unsigned> m_rule;

   using map_t=std::map<unsigned,rule>;
   static map_t m_map;
};

rule::map_t rule::m_map;

void rule::load(std::istream& is)
{
   char ch;
   while(!is.eof())
   {
      // get the rule number
      unsigned rule_number=0;
      while(is.get(ch))
      {
         unsigned val = ch-'0';
         if(val > 9)  // got ':'?
         {
            if(ch == '\n')
               return;
            if(ch == ':')
               break;
            std::cerr << "unexpected input\n";
            exit(-1);
         }
         rule_number *= 10;
         rule_number += val;
      }

      is.get(ch); // get empty space

      is.get(ch);// get a number or quote
      if(ch == '\"')
      {
         is.get(ch); // get the value
         m_map.insert({rule_number,rule(ch)});
         is.get(ch); // get the final quote
         is.get(ch); // get EOL
         continue;
      }

      unsigned rule1=ch-'0';;
      while(is.get(ch))
      {
         unsigned val = ch-'0';
         if(val > 9)
            break;
         rule1 *= 10;
         rule1 += val;
      }
      if(!rule1)
      {
         std::cerr << "unexpected end of input\n";
         exit(-1);
      }
      if(is.eof() || (ch == '\n'))
      {
         m_map.insert({rule_number, rule(rule1)});
         continue;
      }

      unsigned rule2=0;
      while(is.get(ch))
      {
         unsigned val = ch-'0';
         if(val > 9)
            break;
         rule2 *= 10;
         rule2 += val;
      }
      if(!rule2)
      {
         std::cerr << "unexpected end of input\n";
         exit(-1);
      }
      if(is.eof() || (ch == '\n'))
      {
         m_map.insert({rule_number,rule(rule1,rule2)});
         continue;
      }

      is.get(ch); // "| "
      is.get(ch);

      unsigned rule3=0;
      while(is.get(ch))
      {
         unsigned val = ch-'0';
         if(val > 9)
            break;
         rule3 *= 10;
         rule3 += val;
      }
      if(is.eof() || (ch == '\n') || !rule3)
      {
         std::cerr << "unexpected end of input\n";
         exit(-1);
      }

      unsigned rule4=0;
      while(is.get(ch))
      {
         unsigned val = ch-'0';
         if(val > 9)
            break;
         rule4 *= 10;
         rule4 += val;
      }
      if(!rule4)
      {
         std::cerr << "unexpected end of input\n";
         exit(-1);
      }
      m_map.insert({rule_number,rule(rule1,rule2,rule3,rule4)});
   }
}


bool rule::test(const std::string& data, size_t& offset) const
{
   switch(m_type)
   {
      case end: {
         if(data[offset] != m_char)
            return false;
         ++offset;
         return true;
      }
      case one: {
         size_t temp = offset;
         bool rv = m_map.at(m_rule[0]).test(data,temp);
         if(rv)
            offset = temp;
         return rv;
      }
      case two: {
         size_t temp = offset;
         bool rv = m_map.at(m_rule[0]).test(data,temp) && m_map.at(m_rule[1]).test(data,temp);
         if(rv)
            offset = temp;
         return rv;
      }
      case two_two: {
         size_t temp = offset;
         bool rv = m_map.at(m_rule[0]).test(data,temp) && m_map.at(m_rule[1]).test(data,temp);
         if(!rv)
         {
            temp = offset;
            rv = m_map.at(m_rule[2]).test(data,temp) && m_map.at(m_rule[3]).test(data,temp);
         }
         if(rv)
            offset = temp;
         return rv;
      }
   }
   // bad case, should never get here
   return false;
}


int main(int,char**)
{
   auto time_start = std::chrono::high_resolution_clock::now();

   rule::load(std::cin);
   size_t sum=0;
   std::string s;
   while(std::cin >> s)
   {
      sum += rule::test(s);
   }

   std::cout << sum << "\n";

   auto time_end = std::chrono::high_resolution_clock::now();
   std::cout << "\ntime: " << std::chrono::duration_cast<std::chrono::microseconds>(time_end-time_start).count() << " us" << std::endl;
   return 0;
}
